@using System.Security.Claims
@model IEnumerable<Project2.Models.Package>
@{
    ViewData["Title"] = "Home Page";
    var isAdmin = User.FindFirst(x => x.Type.Equals(ClaimsIdentity.DefaultRoleClaimType)).Value.Equals("admin");
    var currentUser = isAdmin ? "users" : "administrator";
}
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Packages <i class="bi bi-boxes"></i></a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarScroll" aria-controls="navbarScroll" aria-expanded="false" aria-label="Toggle navigation"></button>
        <div class="navbar-collapse" id="navbarScroll">
            <input id="search" class="form-control me-2" name="searchString" type="search" placeholder="Search track number" aria-label="Search">
        </div>
        <div class="float-right">
            @if (isAdmin)
            {
                <button type="button" class="btn btn-outline-dark mr-2 addPackageModal" data-toggle="modal" data-target="#AddPackageModal">Add Package  <i class="bi bi-plus"></i><i class="bi bi-box-seam"></i></button>
                <button type="button" onclick="location.href='@Url.Action("ExportToFile","Package")'" class="btn btn-outline-dark mr-2">Packages  <i class="bi bi-download"></i></button>
                <button type="button" onclick="location.href='@Url.Action("AccountManager","Account")'" class="btn btn-outline-dark mr-2">Users <i class="bi bi-people-fill"></i></button>
            }
            <button type="button" onclick="location.href='@Url.Action("Support","Home")'" class="btn btn-outline-dark mr-2">Send message <i class="bi bi-send-plus-fill"></i></button>
            <button type="button" onclick="location.href='@Url.Action("Logout","Account")'" class="btn btn-outline-dark">Exit <i class="bi bi-box-arrow-right"></i></button>
        </div>
    </div>
</nav>
@await Html.PartialAsync("PackageTable", @Model)
@await Html.PartialAsync("AddPackage", new Project2.Models.Package())

<script>
       $(".AddPackage").submit(function(e) {
                     e.preventDefault();
                     var trackNumber = $('.track-number').val();
                     var startPoint = $('.start-point').val();
                     var endPoint = $('.end-point').val();
                     var lastLocation = $('.last-location').val();
                     var currentState = $('.current-state').val();

           if(trackNumber.length != 0 && startPoint.length != 0 && endPoint.length != 0 && lastLocation.length != 0 && currentState.length != 0) {
                     $.ajax({
                     type: "PUT",
                     url: "@Url.Action("AddPackage","Package")",
                     data: $(this).serialize(),
                     dataType: "html",
                     success: function (result) {
                      if (result == "success")
                      {
                           $('.package-table').load("@Url.Action("PackageTable","Package")", function(responseTxt, statusTxt, xhr){
                               if(statusTxt == "success")
                                displayTable(currentPage);
                               if(statusTxt == "error")
                               alert("Error: " + xhr.status + ": " + xhr.statusText);
                                });
                           $('.modal').modal('hide');
                           toastr.success('Package added');
                      }
                     },
                     error: function (xhr, status, error) {
                         toastr.error('The package exists or incorrect data was entered');
                          $('.modal').modal('hide');
                         console.log("Result: " + status + " " + error + " " + xhr.status + " " + xhr.statusText);
                     }
                 });
                 }
                 else{
                 toastr.warning("invalid data!");
                 }
             });

             $(".addPackageModal").click(function(e) {
                     $(".AddPackage")[0].reset();
              });

       function deletePackage(el){
                 var parent = $(el).parents("tr");
                 var id = parent.find("th:eq(0)").text();

                     $.ajax({
                     type: "DELETE",
                     url: "@Url.Action("DeletePackage","Package")",
                     data: { id: id },
                     dataType: "text",
                     success: function (result) {
                      if (result == "success")
                      {
                          parent.hide();
                          toastr.success('Package deleted');
                      }
                      else
                          alert(result);
                     },
                     error: function (xhr, status, error) {
                         console.log("Result: " + status + " " + error + " " + xhr.status + " " + xhr.statusText)
                     }
                 });
             };

        $('#search').on('keyup', function () {
           if($("#search").val()=='' || $("#search").val()=="undefined" || $("#search").val()==null)
             {
             displayTable(currentPage);
             }
             else{
            tableSearch();
             }
       });

       function tableSearch() {
           var table = document.querySelector('.table');
           var flag = false;
           for (var i = 1; i < table.rows.length; i++) {
               flag = false;
               for (var j = table.rows[i].cells.length - 2; j > 0; j--) {
                   flag = table.rows[i].cells[j].innerHTML.toLowerCase().startsWith($("#search").val().toLowerCase());
                   if (flag) {
                       break;
                   }
               }

               if (flag) {
                   table.rows[i].style.display = "";
               }
               else {
                   table.rows[i].style.display = "none";
               }
           }
       }

    function sortTable(column) {
           var table, rows, switching, i, x, y, shouldSwitch, dir, numberOfColumn, switchcount = 0;

               numberOfColumn = column.cellIndex-1;

           table = document.querySelector('.table');
           switching = true;
           dir = "asc";
           while (switching) {
               switching = false;
               rows = table.rows;
               for (i = 1; i < (rows.length - 1); i++) {
                   shouldSwitch = false;

                       x = rows[i].getElementsByTagName("TD")[numberOfColumn];
                       y = rows[i + 1].getElementsByTagName("TD")[numberOfColumn];
                       if (dir == "asc") {
                           if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                               shouldSwitch = true;
                               break;
                           }
                       }
                       else if (dir == "desc") {
                           if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                               shouldSwitch = true;
                               break;
                           }
                       }
               }

               if (shouldSwitch) {
                   rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                   switching = true;
                   switchcount++;
               }
               else {
                   if (switchcount == 0 && dir == "asc") {
                       dir = "desc";
                       switching = true;
                   }
               }
           }
            displayTable(currentPage);
       }

        var rowsTotal = $('.table tbody tr').length;
    var countRows = Math.floor(($(window).height() - $('.table-thead').height() - $('.navbar').height()) / $('.table tbody tr:first').height());
    var rowsShown = $('.table').height() < $(window).height() ? rowsTotal : countRows;
    const rowsPerPage = $('.table').height() < $(window).height() ? rowsTotal : countRows;
    let currentPage = 1;

    function displayTable(page) {
        const start = (page - 1) * rowsPerPage;
        const end = start + rowsPerPage;
        const rows = Array.from(document.querySelectorAll('.table tbody tr'));
        rows.forEach((row, index) => {
            row.style.display = (index >= start && index < end) ? '' : 'none';
        });
    }

    function setupPagination() {
        const rows = Array.from(document.querySelectorAll('.table tbody tr'));
        const pageCount = Math.ceil(rows.length / rowsPerPage);
        const pagination = document.getElementById('pagination');
        pagination.innerHTML = '';

        for (let i = 1; i <= pageCount; i++) {
            const button = document.createElement('button');
            button.innerText = i;
            button.addEventListener('click', () => {
                currentPage = i;
                displayTable(currentPage);
            });
            pagination.appendChild(button);
        }
    }

    displayTable(currentPage);
    setupPagination();
</script>

