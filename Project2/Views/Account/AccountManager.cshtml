@model IEnumerable<Project2.Models.User>
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Users <i class="bi bi-people-fill"></i></a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarScroll" aria-controls="navbarScroll" aria-expanded="false" aria-label="Toggle navigation"></button>
        <div class="navbar-collapse" id="navbarScroll">
            <input id="search" class="form-control me-2" name="searchString" type="search" placeholder="Search Email" aria-label="Search">
        </div>
        <button type="button" class="btn btn-outline-dark mr-2 addUserModal" data-toggle="modal" data-target="#AddUserModal">user<i class="bi bi-person-plus-fill"></i></button>
        <button type="button" onclick="location.href='@Url.Action("Packages","Package")'" class="btn btn-outline-dark mr-2">Back to packages<i class="bi bi-arrow-return-left"></i></button>
        <button type="button" onclick="location.href='@Url.Action("Logout","Account")'" class="btn btn-outline-dark">Exit <i class="bi bi-box-arrow-right"></i></button>
    </div>
</nav>
@await Html.PartialAsync("AccountTable", @Model)
@await Html.PartialAsync("Register", new Project2.ViewModels.RegisterModel())

<script>
                function deleteAccount(el){
                 var parent = $(el).parents("tr");
                          var id = parent.find("th:eq(0)").text();

                              $.ajax({
                              type: "DELETE",
                              url: "@Url.Action("DeleteUser","Account")",
                              data: { id: id },
                              dataType: "text",
                              success: function (result) {
                               if (result == "success")
                               {
                                   parent.remove();
                                   toastr.success('User deleted');
                                   displayTable(currentPage)
                               }
                               else
                                   alert(result);
                              },
                              error: function (xhr, status, error) {
                                  console.log("Result: " + status + " " + error + " " + xhr.status + " " + xhr.statusText)
                              }
                          });
                         }

                   $(".AddUser").submit(function(e) {
                              e.preventDefault();
                              var email = $('.userName').val();
                    var password = $('.userPassword').val();
                    var confirmPassword = $('.userConfirmPassword').val();

                    if(email.length != 0 && password.length != 0 && confirmPassword.length != 0 && password === confirmPassword) {
                              $.ajax({
                              type: "PUT",
                              url: "@Url.Action("Register","Account")",
                              data: $(this).serialize(),
                              dataType: "html",
                              success: function (result) {
                               if (result == "success")
                               {
                                    $('.AccountTable').load("@Url.Action("AccountTable","Account")", function(responseTxt, statusTxt, xhr){
                                   if(statusTxt == "success")
                                    displayTable(currentPage);
                                   if(statusTxt == "error")
                                   alert("Error: " + xhr.status + ": " + xhr.statusText);
                                    });
                                    $('.modal').modal('hide');
                                    toastr.success('User added');
                               }
                              },
                              error: function (xhr, status, error) {
                                  toastr.error('The user exists or incorrect data was entered');
                                   $('.modal').modal('hide');
                                  console.log("Result: " + status + " " + error + " " + xhr.status + " " + xhr.statusText);
                              }
                          });
                          }
                          else{
                          toastr.warning("Passwords don't match");
                          }
                      });

                      $(".addUserModal").click(function(e) {
                              $(".AddUser")[0].reset();
                       });

                function sortTable(column) {
                   var table, rows, switching, i, x, y, shouldSwitch, dir, numberOfColumn, switchcount = 0;

                       numberOfColumn = column.cellIndex-1;

                   table = document.querySelector('.table');
                   switching = true;
                   dir = "asc";
                   while (switching) {
                       switching = false;
                       rows = table.rows;
                       for (i = 1; i < (rows.length - 1); i++) {
                           shouldSwitch = false;

                               x = rows[i].getElementsByTagName("TD")[numberOfColumn];
                               y = rows[i + 1].getElementsByTagName("TD")[numberOfColumn];
                               if (dir == "asc") {
                                   if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                                       shouldSwitch = true;
                                       break;
                                   }
                               }
                               else if (dir == "desc") {
                                   if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                                       shouldSwitch = true;
                                       break;
                                   }
                               }
                       }

                       if (shouldSwitch) {
                           rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                           switching = true;
                           switchcount++;
                       }
                       else {
                           if (switchcount == 0 && dir == "asc") {
                               dir = "desc";
                               switching = true;
                           }
                       }
                   }
                   displayTable(currentPage)
               }

        var rowsTotal = $('.table tbody tr').length;
        var countRows = Math.floor(($(window).height() - $('.table-thead').height() - $('.navbar').height()) / $('.table tbody tr:first').height());
        var rowsShown = $('.table').height() < $(window).height() ? rowsTotal : countRows;
        const rowsPerPage = $('.table').height() < $(window).height() ? rowsTotal : countRows;
        let currentPage = 1;

        function displayTable(page) {
            const start = (page - 1) * rowsPerPage;
            const end = start + rowsPerPage;
            const rows = Array.from(document.querySelectorAll('.table tbody tr'));
            rows.forEach((row, index) => {
                row.style.display = (index >= start && index < end) ? '' : 'none';
            });
            document.getElementById('prev-button').disabled = currentPage === 1;
            document.getElementById('next-button').disabled = end >= rows.length;
            const buttons = Array.from(document.querySelectorAll('#pagination button'));
            buttons.forEach((button, index) => {
                (index == currentPage) ? button.classList.add('btn-dark') : button.classList.remove('btn-dark');
            });
        }

         function setupPagination() {
               const rows = Array.from(document.querySelectorAll('.table tbody tr'));
               const pageCount = Math.ceil(rows.length / rowsPerPage);
               const pagination = document.getElementById('pagination');
               pagination.innerHTML = '';

               const buttonPrev = document.createElement('button');
                   buttonPrev.innerText = '<';
                   buttonPrev.id = 'prev-button'
                    pagination.appendChild(buttonPrev);
               for (let i = 1; i <= pageCount; i++) {
                   const button = document.createElement('button');
                   button.innerText = i;
                   button.className = i === currentPage ? 'btn-dark' : '';
                   button.addEventListener('click', () => {
                       currentPage = i;
                       displayTable(currentPage);
                   });
                   pagination.appendChild(button);
               }

               const buttonNext = document.createElement('button');
                   buttonNext.innerText = '>';
                   buttonNext.id = 'next-button';
                    pagination.appendChild(buttonNext);
           }

        setupPagination();
        displayTable(currentPage);
              document.getElementById('prev-button').addEventListener('click', () => {
        if (currentPage > 1) currentPage--;
        displayTable(currentPage);
    });

    document.getElementById('next-button').addEventListener('click', () => {
        const end = currentPage * rowsPerPage;
        if (end < rowsTotal) currentPage++;
        displayTable(currentPage);
    });


             $('#search').on('keyup', function () {
                 if($("#search").val()=='' || $("#search").val()=="undefined" || $("#search").val()==null)
                 {
                 displayTable(currentPage);
                 }
                 else{
                tableSearch();
                 }
             });

            function tableSearch() {
                var table = document.querySelector('.table');
                var flag = false;
                for (var i = 1; i < table.rows.length; i++) {
                    flag = false;
                    for (var j = table.rows[i].cells.length - 2; j > 0; j--) {
                        flag = table.rows[i].cells[j].innerHTML.toLowerCase().startsWith($("#search").val().toLowerCase());
                        if (flag) {
                            break;
                        }
                    }

                    if (flag) {
                        table.rows[i].style.display = "";
                    }
                    else {
                        table.rows[i].style.display = "none";
                    }
                }
            }
</script>
